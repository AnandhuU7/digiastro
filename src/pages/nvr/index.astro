---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import ProductComponent from "../../components/ProductComponent.astro";
import Search from "../../components/Search.astro";
import Pagination from "../../components/Pagination.astro";

// Hardcoded Category
const category = "nvr";
const productsPerPage = 8;

// Fetch content dynamically based on the category
const allProducts: CollectionEntry<typeof category>[] = (
  await getCollection(category)
).sort((a, b) => a.data.id - b.data.id);

// Enhanced SEO metadata
const title = `NVR - Dubai Hikvision`;
const description = `Browse our comprehensive range of Network Video Recorders (NVR) from Hikvision, the leading distributor in Dubai. Professional-grade surveillance recording solutions with advanced features for security systems.`;
const ogUrl="https://dubai-hikvision.com/nvr"
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  name: `Hikvision Nvr Products`,
  description: description,
  url: ogUrl,
  mainEntity: {
    "@type": "ItemList",
    itemListElement: allProducts
      .slice(0, productsPerPage)
      .map((product, index) => ({
        "@type": "ListItem",
        position: index + 1,
        item: {
          "@type": "Product",
          name: product.data.title,
          image: {
            "@type": "ImageObject",
            contentUrl: new URL(
              product.data.imgCard.src,
              Astro.site,
            ).toString(),
            creditText: "Hikvision " + product.data.title,
            width: 800,
            height: 800,
          },
          aggregateRating: product.data.rating
            ? {
                "@type": "AggregateRating",
                ratingValue: Number(product.data.rating),
                bestRating: 5,
                worstRating: 1,
              }
            : undefined,
          url: new URL(`/${category}/${product.slug}`, Astro.site).toString(),
        },
      })),
  },
  breadcrumb: {
    "@type": "BreadcrumbList",
    itemListElement: [
      {
        "@type": "ListItem",
        position: 1,
        name: "Home",
        item: "https://dubai-hikvision.com",
      },
      {
        "@type": "ListItem",
        position: 2,
        name: "Products",
        item: "https://dubai-hikvision.com/productsnew",
      },
      {
        "@type": "ListItem",
        position: 3,
        name: "Nvr",
        item: "https://dubai-hikvision.com/nvr",
      },
    ],
  },
};
const mainColor = "#32869f";
---

<Layout title={title} description={description} ogUrl={ogUrl} lovosis={structuredData}>
  <div class="container mx-auto px-4 py-8 bg-gray-50">
    <h1
      class="text-4xl font-bold mb-6 text-center"
      style={`color: ${mainColor};`}
    >
      Discover Our Nvr Products
    </h1>
    
    <Search mainColor={mainColor} />

    <!-- Products Grid -->
    <div
      class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8"
      id="productsContainer"
    >
      {
        allProducts.map((product, index) => (
          <div
            class="product-item"
            data-index={index}
            style={`display: ${index < productsPerPage ? "block" : "none"};`}
          >
            <ProductComponent
              product={product}
              mainColor={mainColor}
              category={category}
            />
          </div>
        ))
      }
    </div>

    <!-- Pagination -->
   

    <!-- No Products Found Message -->
    <div id="noProductsMessage" class="hidden text-center py-12">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-24 w-24 mx-auto text-gray-400 mb-4"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        ></path>
      </svg>
      <p class="text-gray-500 text-2xl font-semibold mb-2">No Products Found</p>
      <p class="text-gray-400 text-lg">
        Try adjusting your search or check back later.
      </p>
    </div>

    {
      allProducts.length > productsPerPage && (
        <Pagination
          currentPage={1}
          totalPages={Math.ceil(allProducts.length / productsPerPage)}
        />
      )
    }
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const productsPerPage = 8;
    const productItems = document.querySelectorAll(".product-item");
    const noProductsMessage = document.getElementById("noProductsMessage");
    const searchInput = document.getElementById("searchInput");
    const paginationLinks = document.querySelectorAll(".pagination a");
    let currentPage = 1;
    let filteredProducts = Array.from(productItems);

    // Get initial page from URL
    const urlParams = new URLSearchParams(window.location.search);
    const initialPage = parseInt(urlParams.get("page") || "1") || 1;
    currentPage = initialPage;

    // Initialize pagination and show correct products
    updatePagination();
    updateVisibleProducts();

    // Handle pagination clicks
    document.querySelector(".pagination")?.addEventListener("click", (e) => {
      e.preventDefault();
      const target = (e.target as HTMLElement)?.closest("a");
      if (!target) return;

      const pageNum = target.getAttribute("data-page");
      if (pageNum === "prev") {
        if (currentPage > 1) currentPage--;
      } else if (pageNum === "next") {
        if (currentPage < Math.ceil(filteredProducts.length / productsPerPage))
          currentPage++;
      } else {
        currentPage = parseInt(pageNum || "1");
      }

      updatePagination();
      updateVisibleProducts();
      updateURL();
    });

    // Handle search
    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        const searchTerm =
          (e.target as HTMLInputElement)?.value
          .trim()
          .toLowerCase()
          .replace(/[-\s()\/"']/g, "");
        filteredProducts = Array.from(productItems).filter((item) => {
          const titleElement = item.querySelector(".product-title");
          const title = (titleElement?.textContent?.toLowerCase() || "").replace(/[-\s()\/"']/g, "");
          return title.includes(searchTerm);
        });

        currentPage = 1;
        updatePagination();
        updateVisibleProducts();

        // Show/hide no products message and pagination
        const hasProducts = filteredProducts.length > 0;
        noProductsMessage?.classList.toggle("hidden", hasProducts);
        document.querySelector(".pagination")?.classList.toggle("hidden", !hasProducts);
      });
    }

    function updateVisibleProducts() {
      const startIdx = (currentPage - 1) * productsPerPage;
      const endIdx = startIdx + productsPerPage;

      productItems.forEach(
        (item) => ((item as HTMLElement).style.display = "none"),
      );
      filteredProducts.slice(startIdx, endIdx).forEach((item) => {
        (item as HTMLElement).style.display = "block";
      });
    }

    function updatePagination() {
      const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
      const paginationContainer = document.querySelector(".pagination");
      if (!paginationContainer) return;

      // Update active page
      paginationContainer.querySelectorAll("a").forEach((link) => {
        const pageNum = link.getAttribute("data-page");
        if (pageNum === String(currentPage)) {
          link.classList.add("bg-[#0891b2]", "text-white");
          link.classList.remove("bg-white", "hover:bg-gray-100");
        } else if (pageNum && !["prev", "next"].includes(pageNum)) {
          link.classList.remove("bg-[#0891b2]", "text-white");
          link.classList.add("bg-white", "hover:bg-gray-100");
        }

        // Disable prev/next when needed
        if (pageNum === "prev") {
          link.classList.toggle("cursor-not-allowed", currentPage === 1);
          link.setAttribute(
            "aria-disabled",
            currentPage === 1 ? "true" : "false",
          );
        } else if (pageNum === "next") {
          link.classList.toggle(
            "cursor-not-allowed",
            currentPage === totalPages,
          );
          link.setAttribute(
            "aria-disabled",
            currentPage === totalPages ? "true" : "false",
          );
        }
      });
    }

    function updateURL() {
      const newUrl = new URL(window.location.href);
      if (currentPage === 1) {
        newUrl.searchParams.delete("page");
      } else {
        newUrl.searchParams.set("page", currentPage.toString());
      }
      window.history.pushState({}, "", newUrl);
    }

    // Handle back/forward navigation
    window.addEventListener("popstate", () => {
      const urlParams = new URLSearchParams(window.location.search);
      const page = parseInt(urlParams.get("page") || "1") || 1;
      if (page !== currentPage) {
        currentPage = page;
        updatePagination();
        updateVisibleProducts();
      }
    });
  });
</script>