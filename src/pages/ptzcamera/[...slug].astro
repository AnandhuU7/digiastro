---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";

// Fetch all product entries and generate static paths
export async function getStaticPaths() {
  const productEntries = await getCollection("ptzcamera");
  return productEntries.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
}

// Update the type definition to make thumbnails optional
type ProductData = {
  title: string;
  subTitle: string;
  category: string;
  features: string[];
  imgAlt: string;
  imgCard: { src: string };
  thumbnails?: string[]; // Ensure thumbnails is an array of strings
  specifications: Record<string, Record<string, string | Record<string, string>>>;
};

// Define the type for Astro.props
type AstroProps = {
  product: {
    data: ProductData;
    slug: string;
  };
};

// Access the product data passed via props
const { product } = Astro.props as AstroProps;
const { title, subTitle, category, features, imgAlt, imgCard, thumbnails, specifications } = product.data;

// Debugging: Log thumbnails to verify data
console.log("Thumbnails:", thumbnails);

// Ensure thumbnails is treated as an array
const thumbnailsArray = thumbnails ? (Array.isArray(thumbnails) ? thumbnails : [thumbnails]) : [];
---

<Layout title={title}>
  <main class="container mx-auto px-4 py-4 sm:py-8">
    <div class="product-container max-w-6xl mx-auto">
      <!-- Product Header -->
      <div class="mb-8 sm:mb-12">
        <div class="flex items-center gap-2 mb-2">
          <span class="text-sm text-gray-500 hover:text-gray-700 transition-colors">
            {category}
          </span>
          <span class="text-gray-400">â€¢</span>
          <span class="text-xs bg-gradient-to-r from-red-500 to-red-600 text-white px-3 py-1 rounded-full font-medium tracking-wide shadow-sm">NEW</span>
        </div>
        <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-3">
          {title}
        </h1>
        <p class="text-gray-600 text-lg max-w-2xl">{subTitle}</p>
      </div>

      <!-- Product Main Content -->
      <div class="product-content flex flex-col lg:flex-row gap-8 sm:gap-12">
        <!-- Left: Product Images -->
        <div class="product-images w-full lg:w-5/12">
          <div class="main-image-container mb-4 sm:mb-6 relative group">
            <img 
              src={imgCard.src}
              alt={imgAlt}
              class="w-full h-auto rounded-2xl shadow-md object-cover aspect-[4/3] transition-transform duration-500 group-hover:scale-[1.01] hover:shadow-xl"
            />
            <button class="nav-arrow prev-arrow hidden sm:flex absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-white/95 hover:bg-white rounded-full p-3 shadow-lg backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-all duration-300">
              <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <button class="nav-arrow next-arrow hidden sm:flex absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-white/95 hover:bg-white rounded-full p-3 shadow-lg backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-all duration-300">
              <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </button>
          </div>
          
          <!-- Thumbnail Images -->
          <div class="thumbnails grid grid-cols-4 gap-2 sm:gap-3">
            {thumbnailsArray.length > 0 ? (
              thumbnailsArray.map((thumbnail, index) => (
                <div class={`thumbnail-item ${index === 0 ? 'ring-2 ring-blue-500' : 'ring-1 ring-gray-200'} rounded-lg overflow-hidden cursor-pointer transition-all duration-300 hover:ring-2 hover:ring-blue-400 hover:-translate-y-0.5 hover:shadow-md`}>
                  <img src={thumbnail} alt={`${imgAlt} ${index + 1}`} class="w-full h-full object-cover aspect-square" />
                </div>
              ))
            ) : (
              <p class="text-gray-500">No thumbnails available.</p>
            )}
          </div>
        </div>

        <!-- Right: Product Features -->
        <div class="product-features w-full lg:w-6/12 mt-8 lg:mt-0 lg:pl-8">
          <h2 class="text-2xl font-bold mb-8 text-gray-900 flex items-center">
            <svg class="w-6 h-6 mr-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Product Features
          </h2>

          <!-- Features List -->
          <ul class="features-list space-y-4">
            {features.map((feature) => (
              <li class="flex items-start group">
                <div class="flex-shrink-0 w-6 h-6 mt-0.5">
                  <svg 
                    class="w-5 h-5 text-blue-500 transform transition-transform group-hover:scale-110" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path 
                      stroke-linecap="round" 
                      stroke-linejoin="round" 
                      stroke-width="2.5" 
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                </div>
                <div class="flex-1 ml-4">
                  <p class="text-gray-700 text-[15px] leading-relaxed group-hover:text-gray-900 transition-colors">
                    {feature}
                  </p>
                </div>
              </li>
            ))}
          </ul>

          <!-- Sales Inquiry Button -->
          <div class="mt-10">
            <a 
              href="/contact" 
              class="sales-inquiry-btn group flex items-center justify-center w-full py-4 px-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl font-semibold tracking-wide hover:from-blue-600 hover:to-blue-700 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg"
            >
              <svg 
                class="w-5 h-5 mr-2 transition-transform group-hover:rotate-12" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path 
                  stroke-linecap="round" 
                  stroke-linejoin="round" 
                  stroke-width="2" 
                  d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" 
                />
              </svg>
              Request Information
            </a>
          </div>
        </div>
      </div>
      
      <!-- Specifications Section -->
      <div class="specifications-section mt-16 sm:mt-24">
        <h2 class="text-2xl font-bold mb-8 text-gray-900">
          Technical Specifications
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {Object.entries(specifications).map(([category, specs]) => (
            <div class="spec-group bg-white p-6 rounded-2xl border border-gray-100 shadow-sm hover:shadow-md transition-all duration-300">
              <h3 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                <svg class="w-5 h-5 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {category}
              </h3>
              <div class="overflow-x-auto">
                <table class="w-full">
                  <tbody class="divide-y divide-gray-100">
                    {Object.entries(specs).map(([key, value]) => (
                      <tr class="hover:bg-gray-50/50">
                        <td class="py-3 pr-4 text-gray-600 font-medium text-sm whitespace-nowrap">{key.replace(/_/g, ' ')}</td>
                        <td class="py-3 pl-4 text-gray-800 text-sm">
                          {typeof value === 'object' 
                            ? Object.entries(value).map(([k, v]) => (
                                <div class="mb-1.5">
                                  <strong class="text-gray-700">{k.replace(/_/g, ' ')}:</strong> {v}
                                </div>
                              ))
                            : value}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* Hide scrollbar but keep functionality */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
</style>

<script>
  // JavaScript for image sliding functionality
  document.addEventListener("DOMContentLoaded", () => {
    const prevArrow = document.querySelector(".prev-arrow");
    const nextArrow = document.querySelector(".next-arrow");
    const mainImage = document.querySelector(".main-image-container img") as HTMLImageElement | null;
    const thumbnails = document.querySelectorAll(".thumbnail-item");

    let currentIndex = 0;
    const totalImages = thumbnails.length;

    // Function to update the main image
    function updateMainImage(index: number) {
      if (thumbnails.length > 0 && mainImage) {
        const thumbnailImg = thumbnails[index]?.querySelector('img') as HTMLImageElement | null;
        if (thumbnailImg) {
          const newSrc = thumbnailImg.src;
          mainImage.src = newSrc;

          // Update active thumbnail
          thumbnails.forEach((thumb, i) => {
            if (i === index) {
              thumb.classList.add('ring-2', 'ring-blue-500');
              thumb.classList.remove('ring-1', 'ring-gray-200');
            } else {
              thumb.classList.remove('ring-2', 'ring-blue-500');
              thumb.classList.add('ring-1', 'ring-gray-200');
            }
          });
        }
      }
    }

    // Thumbnail click
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener("click", () => {
        currentIndex = index;
        updateMainImage(currentIndex);
      });
    });

    // Previous arrow click
    prevArrow?.addEventListener("click", () => {
      currentIndex = (currentIndex - 1 + totalImages) % totalImages;
      updateMainImage(currentIndex);
    });

    // Next arrow click
    nextArrow?.addEventListener("click", () => {
      currentIndex = (currentIndex + 1) % totalImages;
      updateMainImage(currentIndex);
    });
  });
</script>