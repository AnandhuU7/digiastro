---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import ProductComponent from "../../components/ProductComponent.astro";
import Search from "../../components/Search.astro";


const category = "explosionproof";

const products: CollectionEntry<typeof category>[] = (
  await getCollection(category)
).sort((a, b) => a.data.id - b.data.id);

const title = `Explosion Proof - Dubai Hikvision`;
const description = `Browse our comprehensive range of explosion proof products from Hikvision, the leading distributor in Dubai. Professional-grade explosion-proof security cameras and surveillance systems for hazardous environments.`;
const ogUrl="https://dubai-hikvision.com/explosionproof"
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": title,
  "description": description,
  "url": ogUrl,
  "breadcrumb": {
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "Home",
        "item": "https://dubai-hikvision.com"
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": "Products",
        "item": "https://dubai-hikvision.com/productsnew"
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": category.charAt(0).toUpperCase() + category.slice(1),
        "item": ogUrl
      }
    ]
  },
  "mainEntity": {
    "@type": "ItemList",
    itemListElement: products.map((product, index) => ({
      "@type": "ListItem",
      position: index + 1,
      name: product.data.title,
      image: {
        "@type": "ImageObject",
        contentUrl: new URL(product.data.imgCard.src, Astro.site).toString(),
        creditText: "Hikvision " + product.data.title,
        width: 800,
        height: 800,
      },
      url: new URL(`/${category}/${product.slug}`, Astro.site).toString(),
    })),
  },
};

const mainColor = "#32869f";
---

<Layout 
  title={title} 
  description={description} 
  ogUrl={ogUrl}
  lovosis={structuredData}

>
  <div class="container mx-auto px-4 py-8 bg-gray-50">
    <h1 class="text-4xl font-bold mb-6 text-center" style={`color: ${mainColor};`}>
      Discover Our {category.charAt(0).toUpperCase() + category.slice(1)} Products
    </h1>
    <!-- Search Bar -->
    <Search mainColor={mainColor} />

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
      {products.map((product) => (
        <div class="product-item">
          <ProductComponent product={product} mainColor={mainColor} category={category} />
        </div>
      ))}
    </div>

    <!-- No Products Found Message -->
    <div id="noProductsMessage" class="hidden text-center py-12">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <p class="text-gray-500 text-2xl font-semibold mb-2">No Products Found</p>
      <p class="text-gray-400 text-lg">Try adjusting your search or check back later.</p>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById("searchInput");
    const productItems = document.querySelectorAll(".product-item");
    const noProductsMessage = document.getElementById("noProductsMessage");

    if (searchInput && productItems && noProductsMessage) {
      searchInput.addEventListener("input", (event) => {
        const target = event.target as HTMLInputElement | null;
        const searchTerm = (target?.value || "")
          .trim()
          .toLowerCase()
          .replace(/[-\s()\/]/g, "");

        let visibleCount = 0;

        productItems.forEach((item) => {
          const titleElement = item.querySelector(".product-title");
          const title = (
            titleElement?.textContent?.toLowerCase() || ""
          ).replace(/[-\s()\/]/g, "");

          if (title.includes(searchTerm)) {
            item.classList.remove("hidden");
            visibleCount++;
          } else {
            item.classList.add("hidden");
          }
        });

        // Show or hide the "No Products Found" message
        if (visibleCount === 0) {
          noProductsMessage.classList.remove("hidden");
        } else {
          noProductsMessage.classList.add("hidden");
        }
      });
    }
  });
</script>