---
// Define the ProductData type
type ProductData = {
  title: string;
  subTitle: string;
  category: string;
  features: string[];
  imgAlt: string;
  imgCard: { src: string };
  thumbnails?: { src: string }[];
  specifications: Record<
    string,
    Record<string, string | Record<string, string>>
  >;
};

// Access the product data passed via props
const { product } = Astro.props;
const {
  title,
  subTitle,
  category,
  features,
  imgAlt,
  imgCard,
  thumbnails,
  specifications,
} = product.data as ProductData;

const allImages = [
  {
    src: imgCard.src,
    alt: imgAlt
  },
  ...(thumbnails ? thumbnails.map(thumb => ({
    src: thumb.src,
    alt: `${imgAlt} thumbnail`
  })) : [])
];

// Generate meta description
const metaDescription = `${subTitle}. Key features: ${features.slice(0, 3).join(', ')}...`;

// Enhanced Product Schema
const productSchema = {
  "@context": "https://schema.org",
  "@type": "Product",
  "productID": product.data.id,
  "name": title,
  "description": Array.isArray(product.data.features)
          ? product.data.features.join(", ")
          : product.data.features,
  "url": `https://dubai-hikvision.com/${category}/${product.slug}`,
  "category": category,
  "brand": {
    "@type": "Brand",
    "name": "Hikvision",
    "logo": "https://dubai-hikvision.com/logo.svg"
  },
  "image": [
    {
      "@type": "ImageObject",
      "url": `https://dubai-hikvision.com${imgCard.src}`,
      "width": 800,
      "height": 800,
      "caption": `${title} - ${imgAlt}`,
      "representativeOfPage": true
    },
    ...(thumbnails ? thumbnails.map(thumb => ({
      "@type": "ImageObject",
      "url": `https://dubai-hikvision.com${thumb.src}`,
      "width": 800,
      "height": 800,
      "caption": `${title} - ${imgAlt} thumbnail`
    })) : [])
  ],
  "offers": {
    "@type": "Offer",
    "priceCurrency": "AED",
    "price": 50,
    "priceValidUntil": product.data.priceExpiry || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    "itemCondition": "https://schema.org/NewCondition",
    "availability": "https://schema.org/InStock",
    "seller": {
      "@type": "Organization",
      "name": "Dubai Hikvision",
      "url": "https://dubai-hikvision.com"
    }
  },
  "aggregateRating": product.data.rating && product.data.reviewCount ? {
    "@type": "AggregateRating",
    "ratingValue": Number(product.data.rating),
    "reviewCount": Math.round(Number(product.data.reviewCount)),
    "bestRating": 5,
    "worstRating": 1
  } : undefined,
  "additionalProperty": [
    ...features.map(feature => ({
      "@type": "PropertyValue",
      "name": "Feature",
      "value": feature
    })),
    ...Object.entries(specifications).flatMap(([specCategory, specs]) => 
      Object.entries(specs).map(([key, value]) => ({
        "@type": "PropertyValue",
        "name": `${specCategory} - ${key.replace(/_/g, ' ')}`,
        "value": typeof value === 'string' ? value : JSON.stringify(value)
      }))
    )
  ],
};
// Ensure thumbnails is treated as an array
const thumbnailsArray = thumbnails
  ? Array.isArray(thumbnails)
    ? thumbnails
    : [thumbnails]
  : [];
---
<script type="application/ld+json" set:html={JSON.stringify(productSchema)} />
<main class="container mx-auto px-4 py-4 sm:py-8">
  <div class="product-container max-w-6xl mx-auto">
    <!-- Product Header -->
    <div class="mb-8 sm:mb-12">
      <div class="flex items-center gap-2 mb-2">
        <span class="text-sm text-gray-500 hover:text-gray-700 transition-colors">
          {category}
        </span>
        <span class="text-gray-400">â€¢</span>
        <span class="text-xs bg-gradient-to-r from-red-500 to-red-600 text-white px-3 py-1 rounded-full font-medium tracking-wide shadow-sm">
          NEW
        </span>
      </div>
      <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-3">
        {title}
      </h1>
      <p class="text-gray-600 text-lg max-w-2xl">{subTitle}</p>
    </div>

    <!-- Product Main Content -->
    <div class="product-content flex flex-col lg:flex-row gap-8 sm:gap-12">
      <!-- Left: Product Images -->
      <div class="product-images w-full lg:w-5/12">
        <div class="main-image-container mb-4 sm:mb-6 relative group overflow-hidden rounded-2xl shadow-md">
          <img
            src={imgCard.src}
            alt={imgAlt}
            class="w-full h-64 md:h-80 object-contain transition-all duration-500 group-hover:scale-[1.02]"
          />
          <div class="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          <button class="nav-arrow prev-arrow flex absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-white/95 hover:bg-white rounded-full p-3 shadow-lg backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-all duration-300 transform -translate-x-10 group-hover:translate-x-0">
            <svg
              class="w-5 h-5 sm:w-6 sm:h-6 text-gray-800"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"
              />
            </svg>
          </button>
          <button class="nav-arrow next-arrow flex absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-white/95 hover:bg-white rounded-full p-3 shadow-lg backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-x-10 group-hover:translate-x-0">
            <svg
              class="w-5 h-5 sm:w-6 sm:h-6 text-gray-800"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"
              />
            </svg>
          </button>
        </div>

        <!-- Thumbnail Images -->
        <div class="thumbnails grid grid-cols-4 gap-2 sm:gap-3">
          {thumbnailsArray.length > 0 ? (
            thumbnailsArray.map((thumbnail, index) => (
              <div
                class={`thumbnail-item ${index === 0 ? "ring-2 ring-blue-500" : "ring-1 ring-gray-200"} rounded-lg overflow-hidden cursor-pointer transition-all duration-300 hover:ring-2 hover:ring-blue-400 hover:-translate-y-0.5 hover:shadow-md group`}
              >
                <img
                  src={thumbnail.src}
                  alt={`${imgAlt} ${index + 1}`}
                  class="w-full h-full object-cover aspect-square transition-transform duration-300 group-hover:scale-105"
                />
              </div>
            ))
          ) : (
            <p class="text-gray-500">No thumbnails available.</p>
          )}
        </div>
      </div>

      <!-- Right: Product Features -->
      <div class="product-features w-full lg:w-6/12 mt-8 lg:mt-0 lg:pl-8 flex flex-col">
        <h2 class="text-2xl font-bold mb-4 text-gray-900 flex items-center">
          <span class="bg-blue-500 w-1 h-8 rounded-full mr-3 animate-pulse"></span>
          Product Features
        </h2>

        <!-- Features List - Modified with smaller padding and spacing -->
        <div class="features-grid grid grid-cols-1 md:grid-cols-2 gap-2 md:gap-3">
          {features.map((feature, index) => (
            <div class="feature-card bg-gradient-to-br from-white to-gray-50 p-3 sm:p-4 rounded-xl border border-gray-100 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-1 hover:border-blue-200 group">
              <div class="feature-number bg-blue-100 text-blue-600 font-bold rounded-full w-6 h-6 flex items-center justify-center mb-2 group-hover:bg-blue-500 group-hover:text-white transition-colors duration-300">
                {index + 1}
              </div>
              <p class="text-gray-700 text-sm sm:text-base font-medium leading-relaxed group-hover:text-gray-900 transition-colors">
                {feature}
              </p>
            </div>
          ))}
        </div>

        <!-- Sales Inquiry Button -->
        <div class="mt-6 sm:mt-8">
          <a
            href="/contact"
            class="sales-inquiry-btn group flex items-center justify-center w-full py-3 sm:py-4 px-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl font-semibold tracking-wide hover:from-blue-600 hover:to-blue-700 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg"
          >
            <svg
              class="w-5 h-5 mr-2 transition-transform group-hover:rotate-12"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
              />
            </svg>
            Request Information
          </a>
        </div>
      </div>
    </div>

    <!-- Specifications Section -->
    <div class="specifications-section mt-16 sm:mt-24">
      <h2 class="text-2xl font-bold mb-8 text-gray-900 flex items-center">
        <svg
          class="w-6 h-6 mr-3 text-blue-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"
          />
        </svg>
        Technical Specifications
      </h2>

      <div class="space-y-6">
        {Object.entries(specifications).map(([category, specs]) => (
          <div class="spec-category">
            <button 
              class="spec-toggle w-full bg-white p-4 rounded-xl border border-gray-100 shadow-sm hover:shadow-md transition-all duration-300 flex justify-between items-center"
              aria-expanded="false"
              aria-controls={`specs-${category.replace(/\s+/g, '-').toLowerCase()}`}
            >
              <h3 class="text-xl font-semibold text-gray-800 flex items-center">
                <svg
                  class="w-5 h-5 mr-2 text-blue-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                {category}
              </h3>
              <svg 
                class="toggle-icon w-5 h-5 text-gray-400 transition-transform duration-300" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path 
                  stroke-linecap="round" 
                  stroke-linejoin="round" 
                  stroke-width="2" 
                  d="M19 9l-7 7-7-7"
                ></path>
              </svg>
            </button>
            
            <div 
              id={`specs-${category.replace(/\s+/g, '-').toLowerCase()}`}
              class="spec-content max-h-0 overflow-hidden transition-all duration-300 ease-in-out"
            >
              <div class="bg-white p-6 pt-2 rounded-b-xl border-x border-b border-gray-100">
                <div class="overflow-x-auto">
                  <table class="w-full">
                    <tbody class="divide-y divide-gray-100">
                      {Object.entries(specs).map(([key, value]) => (
                        <tr class="hover:bg-gray-50/50">
                          <td class="py-3 pr-4 text-gray-600 font-medium text-sm whitespace-nowrap">
                            {key.replace(/_/g, " ")}
                          </td>
                          <td class="py-3 pl-4 text-gray-800 text-sm">
                            {typeof value === "object"
                              ? Object.entries(value).map(([k, v]) => (
                                  <div class="mb-1.5">
                                    <strong class="text-gray-700">
                                      {k.replace(/_/g, " ")}:
                                    </strong>{" "}
                                    {v}
                                  </div>
                                ))
                              : value}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</main>

<style>
  /* Hide scrollbar but keep functionality */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  /* Add transitions for specification accordion */
  .spec-content.open {
    max-height: 1000px; /* Large enough to contain content */
    margin-top: -1px;
  }
  
  .toggle-icon.open {
    transform: rotate(180deg);
  }
  
  /* Animated feature cards */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .feature-card {
    animation: fadeIn 0.5s ease-out forwards;
    animation-delay: calc(var(--animation-order) * 0.1s);
    opacity: 0;
  }
</style>

<script>
  // JavaScript for image sliding functionality
  document.addEventListener("DOMContentLoaded", () => {
    const prevArrow = document.querySelector(".prev-arrow");
    const nextArrow = document.querySelector(".next-arrow");
    const mainImage = document.querySelector(
      ".main-image-container img",
    ) as HTMLImageElement | null;
    const thumbnails = document.querySelectorAll(".thumbnail-item");

    let currentIndex = 0;
    const totalImages = thumbnails.length;

    // Function to update the main image
    function updateMainImage(index: number) {
      if (thumbnails.length > 0 && mainImage) {
        const thumbnailImg = thumbnails[index]?.querySelector(
          "img",
        ) as HTMLImageElement | null;
        if (thumbnailImg) {
          const newSrc = thumbnailImg.src;
          mainImage.src = newSrc;

          // Update active thumbnail
          thumbnails.forEach((thumb, i) => {
            if (i === index) {
              thumb.classList.add("ring-2", "ring-blue-500");
              thumb.classList.remove("ring-1", "ring-gray-200");
            } else {
              thumb.classList.remove("ring-2", "ring-blue-500");
              thumb.classList.add("ring-1", "ring-gray-200");
            }
          });
        }
      }
    }

    // Thumbnail click
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener("click", () => {
        currentIndex = index;
        updateMainImage(currentIndex);
      });
    });

    // Previous arrow click
    prevArrow?.addEventListener("click", () => {
      currentIndex = (currentIndex - 1 + totalImages) % totalImages;
      updateMainImage(currentIndex);
    });

    // Next arrow click
    nextArrow?.addEventListener("click", () => {
      currentIndex = (currentIndex + 1) % totalImages;
      updateMainImage(currentIndex);
    });
    
    // Specification accordion functionality
    const specToggles = document.querySelectorAll('.spec-toggle');
    
    specToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
        toggle.setAttribute('aria-expanded', (!isExpanded).toString());
        
        const contentId = toggle.getAttribute('aria-controls');
        if (contentId) {
          const content = document.getElementById(contentId);
          const icon = toggle.querySelector('.toggle-icon');
          
          if (content && icon) {
            if (!isExpanded) {
              content.classList.add('open');
              icon.classList.add('open');
            } else {
              content.classList.remove('open');
              icon.classList.remove('open');
            }
          }
        }
      });
    });
    
    // Add staggered animation to feature cards
    const featureCards = document.querySelectorAll('.feature-card');
    featureCards.forEach((card, index) => {
      const htmlCard = card as HTMLElement; // Cast to HTMLElement
      htmlCard.style.setProperty('--animation-order', index.toString());
    });
  });
</script>