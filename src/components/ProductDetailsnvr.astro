---
// Define the ProductData type
type ProductData = {
  title: string;
  subTitle: string;
  category: string;
  features: string[];
  imgAlt: string;
  imgCard: { src: string };
  thumbnails?: { src: string }[];
  specifications: Record<
    string,
    Record<string, string | Record<string, string>>
  >;
};

// Access the product data passed via props
const { product } = Astro.props;
const {
  title,
  subTitle,
  category,
  features,
  imgAlt,
  imgCard,
  thumbnails,
  specifications = {}, // Fallback for specifications
} = product.data as ProductData;

// Ensure thumbnails is treated as an array
const thumbnailsArray = thumbnails
  ? Array.isArray(thumbnails)
    ? thumbnails
    : [thumbnails]
  : [];
---

<main class="container mx-auto px-4 py-8 sm:py-16 bg-gradient-to-b from-gray-50 to-white">
  <div class="product-container max-w-6xl mx-auto">
    <div class="mb-8 sm:mb-12 text-center sm:text-left">
      <span class="text-sm font-semibold inline-block py-1 px-3 rounded-full bg-blue-50 text-blue-700 mb-4">{category}</span>
      <h1 class="text-3xl sm:text-5xl font-bold text-gray-900 mb-4 tracking-tight">{title}</h1>
      <p class="text-gray-600 text-lg max-w-2xl sm:mx-0 mx-auto leading-relaxed">{subTitle}</p>
    </div>
    
    <div class="product-content flex flex-col lg:flex-row gap-10 sm:gap-16">
      <div class="product-images w-full lg:w-5/12 transition-all duration-300">
        <div class="relative group">
          <img src={imgCard.src} alt={imgAlt} class="w-full h-auto rounded-2xl shadow-lg object-cover aspect-[4/3] hover:shadow-xl transition-all duration-300"/>
          <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 rounded-2xl transition-opacity duration-300"></div>
        </div>
        <div class="thumbnails grid grid-cols-4 gap-3 sm:gap-4 mt-4">
          {thumbnailsArray.length > 0 ? (
            thumbnailsArray.map((thumbnail, index) => (
              <div class="cursor-pointer overflow-hidden rounded-lg transform hover:scale-105 transition-transform duration-200 shadow-sm hover:shadow-md">
                <img src={thumbnail.src} alt={`${imgAlt} ${index + 1}`} class="w-full h-full object-cover aspect-square"/>
              </div>
            ))
          ) : (
            <p class="text-gray-500 col-span-4 text-center py-4">No thumbnails available.</p>
          )}
        </div>
      </div>

      <div class="product-features w-full lg:w-7/12 mt-8 lg:mt-0 lg:pl-8">
        <h2 class="text-2xl font-bold mb-8 text-gray-900 flex items-center">
          <span class="h-8 w-1 bg-blue-600 rounded-full mr-3"></span>
          Product Features
        </h2>
        <ul class="features-list space-y-5">
          {features.map((feature) => (
            <li class="text-gray-700 text-lg leading-relaxed flex items-start">
              <span class="text-blue-600 mr-3 mt-1">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
              </span>
              {feature}
            </li>
          ))}
        </ul>
      </div>
    </div>

    <div class="specifications-section mt-20 sm:mt-32">
      <h2 class="text-2xl font-bold mb-10 text-gray-900 text-center">
        <span class="pb-2 relative border-b-2 border-blue-600">Technical Specifications</span>
      </h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        {Object.entries(specifications).map(([category, specs]) => (
          <div class="bg-white p-6 rounded-2xl border border-gray-100 shadow-md hover:shadow-lg transition-shadow duration-300">
            <h3 class="text-xl font-semibold mb-5 text-gray-800 pb-2 border-b border-gray-100">{category}</h3>
            <table class="w-full">
              <tbody class="divide-y divide-gray-100">
                {Object.entries(specs).map(([key, value]) => (
                  <tr class="hover:bg-gray-50 transition-colors duration-150">
                    <td class="py-3 pr-4 text-gray-600 font-medium text-sm">{key.replace(/_/g, " ")}</td>
                    <td class="py-3 pl-4 text-gray-800 text-sm">
                      {typeof value === "object" ? (
                        Object.entries(value).map(([subKey, subValue]) => (
                          <div class="mb-1 last:mb-0"><strong class="text-blue-700">{subKey.replace(/_/g, " ")}:</strong> {subValue}</div>
                        ))
                      ) : (
                        value
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ))}
      </div>
    </div>
  </div>
</main>
<style>
  /* Hide scrollbar but keep functionality */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
</style>

<script>
  // JavaScript for image sliding functionality
  document.addEventListener("DOMContentLoaded", () => {
    const prevArrow = document.querySelector(".prev-arrow");
    const nextArrow = document.querySelector(".next-arrow");
    const mainImage = document.querySelector(
      ".main-image-container img",
    ) as HTMLImageElement | null;
    const thumbnails = document.querySelectorAll(".thumbnail-item");

    let currentIndex = 0;
    const totalImages = thumbnails.length;

    // Function to update the main image
    function updateMainImage(index: number) {
      if (thumbnails.length > 0 && mainImage) {
        const thumbnailImg = thumbnails[index]?.querySelector(
          "img",
        ) as HTMLImageElement | null;
        if (thumbnailImg) {
          const newSrc = thumbnailImg.src;
          mainImage.src = newSrc;

          // Update active thumbnail
          thumbnails.forEach((thumb, i) => {
            if (i === index) {
              thumb.classList.add("ring-2", "ring-blue-500");
              thumb.classList.remove("ring-1", "ring-gray-200");
            } else {
              thumb.classList.remove("ring-2", "ring-blue-500");
              thumb.classList.add("ring-1", "ring-gray-200");
            }
          });
        }
      }
    }

    // Thumbnail click
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener("click", () => {
        currentIndex = index;
        updateMainImage(currentIndex);
      });
    });

    // Previous arrow click
    prevArrow?.addEventListener("click", () => {
      currentIndex = (currentIndex - 1 + totalImages) % totalImages;
      updateMainImage(currentIndex);
    });

    // Next arrow click
    nextArrow?.addEventListener("click", () => {
      currentIndex = (currentIndex + 1) % totalImages;
      updateMainImage(currentIndex);
    });
  });
</script>